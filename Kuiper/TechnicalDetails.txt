2D Wireframe collider in this project is intended to work with rigid, holeless polygonal shapes (concave and convex).

==========Current methodology==========

Collision is being reworked currently. This new implementation will use a Time of Impact (TOI) calculation to locate contact points via the Bilateral Advancement algorithm described by Erin Catto (2013 GDC).

Current status:

Polygon Decomposition into convex primitive elements:
	- Implemented a routine suggested by Emanuele Feronato (created initially for implementation with Box2D)
	- Works in decomposing polygons with no 3 consecutive points collinear, no line overlaps, and no holes.
	- This implementation does not necessarily triangularize the shape.
	- New points may be added onto edges (possibly avoidable with another algorithm)
	- There does seem to be some potential to creat interior polygons which have no truly exterior sides, but currently these would be kept.
	- Inefficiency can be seen analyzing the Shapes::Star() polygon. The routine adds 5 points, creating a nearly interior pentagon. Creating the pentagon on the inside vertecies would reduce the number of points, and then could have different handling (probably can't really be discared for some edge cases)
	- Implementation can be found: Shapes::ConvexSeparator(..) in Shapes.cpp

GJK Finding nearest point on a polygon to a source point:
	- Implemented and working for convex and concave polygons
	- Implementation can be found: Shapes::FindApproach(..) in Shapes.cpp
	- Classes "Simplex" and "SimplexVertex", as well as the struct "Approach" (containing the result of this calculation) are declared along with Shapes (see also Shapes.h) and defined in Simplex.cpp.

GJK Finding nearest points for 2 polygons:
	- Implemented, for Convex and Concave polygons
	- Currently, checks against every pair of primitive convex elements
	- There should be estimating methods which can cull the need to check each possible pair
	- Can be seen in Shapes.cpp, as described above.

TOI Calculation (ColliderManager):
	- Implemented where possible- algorithm falls back on discrete collisions if not possible to determine.

Broad phase detection (ColliderManager::DoBinaryCollision):
	- All colliders store a bounding radius which is intended to be used (Axis-Aligned Bounding Boxes [AABB] are also available).
	- This is done in ColliderManager::DoBinaryCollision(..) in ColliderManager.cpp, prior to calling Entity::Recoil to verify the existence of a collision.

Mid phase detection (ColliderManager::ResolveMidField):
	- Fully implemented. Primitives are collision candidates if their AABB overlaps with the target polygon's AABB (for whole polygon).

Near phase detection (ColliderManager::ResolveNearField):
	- Individual primitives are checked for overlapping AABBs.
	- If overlapping, ToI calculation is attempted- misses may still be detected, resulting in no collision
	- Additionally, if collision is present from start, a code is returned to resolve the collision as a discrete collision, as opposed to a continuous collision.

Impulse is imparted (Entity::Recoil):
	- Applied at the identified contact points.
	- Time is reversed to the collision time and propogated back after impulse is applied.s
